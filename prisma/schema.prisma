generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  username       String?   @unique
  country        String?
  account_tier   AccountTier @default(FREE)
  billing_address Json?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  
  // Relations
  boards         Board[]
  accounts       Account[]
  sessions       Session[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Board {
  id            String   @id @default(cuid())
  creator_id    String
  title         String
  description   String?
  slug          String   @unique
  custom_domain String?  @unique
  theme_config  Json?
  is_public     Boolean  @default(true)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  
  // Relations
  creator          User             @relation(fields: [creator_id], references: [id], onDelete: Cascade)
  feature_requests FeatureRequest[]
  
  @@map("boards")
}

model FeatureRequest {
  id               String           @id @default(cuid())
  board_id         String
  submitter_email  String?
  submitter_name   String?
  title            String
  description      String?
  status           RequestStatus    @default(NEW)
  upvote_count     Int              @default(0)
  comment_count    Int              @default(0)
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  
  // Relations
  board    Board     @relation(fields: [board_id], references: [id], onDelete: Cascade)
  upvotes  Upvote[]
  comments Comment[]
  
  @@map("feature_requests")
}

model Upvote {
  id                  String   @id @default(cuid())
  feature_request_id  String
  user_identifier     String   // email or user_id
  created_at          DateTime @default(now())
  
  // Relations
  feature_request FeatureRequest @relation(fields: [feature_request_id], references: [id], onDelete: Cascade)
  
  @@unique([feature_request_id, user_identifier])
  @@map("upvotes")
}

model Comment {
  id                  String    @id @default(cuid())
  feature_request_id  String
  parent_comment_id   String?
  author_name         String
  author_email        String
  content             String
  is_edited           Boolean   @default(false)
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  
  // Relations
  feature_request FeatureRequest @relation(fields: [feature_request_id], references: [id], onDelete: Cascade)
  parent_comment  Comment?       @relation("CommentReplies", fields: [parent_comment_id], references: [id])
  replies         Comment[]      @relation("CommentReplies")
  
  @@map("comments")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum AccountTier {
  FREE
  PRO
  ENTERPRISE
}

enum RequestStatus {
  NEW
  IN_PROGRESS
  SHIPPED
  CANCELLED
}
